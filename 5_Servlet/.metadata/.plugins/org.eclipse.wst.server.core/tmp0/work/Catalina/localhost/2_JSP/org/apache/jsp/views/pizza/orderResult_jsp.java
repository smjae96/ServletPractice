/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.86
 * Generated at: 2024-03-08 05:11:42 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.views.pizza;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class orderResult_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(3);
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Order Result</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	");

		String name = (String)request.getAttribute("name");
		String phone = (String)request.getAttribute("phone");
		String address = (String)request.getAttribute("address");
		String requestion = (String)request.getAttribute("requestion");
		
		String menu = (String)request.getAttribute("menu");
		String[] topping = (String[])request.getAttribute("topping");
		String[] side = (String[])request.getAttribute("side");
	
      out.write("\r\n");
      out.write("    <h1>피자 주문 내역</h1>\r\n");
      out.write("    <br>\r\n");
      out.write("    <h3>주문자 정보</h3>\r\n");
      out.write("    ");
      out.write("\r\n");
      out.write("    <br><br>\r\n");
      out.write("    <div style=\"color:blue\">");
      out.print( request.getAttribute("address") );
      out.write("</div>\r\n");
      out.write("    <div style=\"color:blue\">");
      out.print( request.getAttribute("phone") );
      out.write("</div>\r\n");
      out.write("    <br><br>\r\n");
      out.write("    <h3>요청 사항</h3>\r\n");
      out.write("    ");
 if(requestion.isEmpty()) { 
      out.write("\r\n");
      out.write("    	없음\r\n");
      out.write("   	");
 } else { 
      out.write("\r\n");
      out.write("   		");
      out.print( requestion );
      out.write('\r');
      out.write('\n');
      out.write('	');
 } 
      out.write("			\r\n");
      out.write("    <hr>\r\n");
      out.write("    <h3>주문 정보</h3>\r\n");
      out.write("    ");
      out.print( menu );
      out.write("\r\n");
      out.write("    <ul>\r\n");
      out.write("    	<li>\r\n");
      out.write("    		토핑 추가 항목\r\n");
      out.write("    		");
 if (topping == null) { 
      out.write("\r\n");
      out.write("    			없음\r\n");
      out.write("   			");
 } else { 
      out.write("\r\n");
      out.write("   				<ul>\r\n");
      out.write("   					");
 for(String toppings: topping) { 
      out.write("\r\n");
      out.write("   						<li>");
      out.print( toppings );
      out.write("</li>\r\n");
      out.write("					");
 } 
      out.write("\r\n");
      out.write("   				</ul>	\r\n");
      out.write("			");
 }
      out.write("\r\n");
      out.write("		</li>\r\n");
      out.write("		<li>\r\n");
      out.write("			사이드 선택 항목\r\n");
      out.write("			");
 if (side == null) { 
      out.write("\r\n");
      out.write("				없음\r\n");
      out.write("			");
 } else { 
      out.write("\r\n");
      out.write("				<ul>\r\n");
      out.write("					");
 for (String sides : side) { 
      out.write("\r\n");
      out.write("						<li>");
      out.print( sides );
      out.write("</li>\r\n");
      out.write("					 ");
} 
      out.write("\r\n");
      out.write("				</ul> \r\n");
      out.write("			");
 } 
      out.write("\r\n");
      out.write("		</li> \r\n");
      out.write("	</ul>\r\n");
      out.write("	<hr>\r\n");
      out.write("	<h2>");
      out.print( name );
      out.write("님!</h1>\r\n");
      out.write("	<h2>즐거운 식사 되세요.</h1>\r\n");
      out.write("    	\r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("    \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
