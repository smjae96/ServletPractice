* 서블릿 :  [	웹 서비스를 위한 자바 클래스             ]
	  사용자의 요청을 받아 처리하고 응답 페이지를 만들어 다시 사용자에게 전송
	  웹에서 동적인 페이지를 자바로 구현할 수 있게 도와주는 [ 서버     ] 측 프로그램
               [   자바   ]로 [ HTML      ] 구현 (키워드: 자바, HTML)

* 요청 방식
	- GET 방식
	   + 특징1. [ URL의 헤더영역	]에 데이터를 포함시켜 요청
	   + 특징2. [	데이터 전송길이 ]의 제한이 있음
	   + 특징3. URL에 데이터가 노출되므로 즐겨찾기 기능 가능
	- POST 방식
	   + 특징1. [URL의 Body영역	]에 데이터를 포함시켜 요청
	   + 특징2. [	데이터 전송길이		]의 제한이 없음
	   + 특징3. 즐겨찾기(북마크)는 가능하나, 데이터가 url에 노출되지 않아 기존 화면과 다를 수 있음
	   + 특징4. 타임 아웃이 존재하기 때문에 페이지 요청에 기다리는 시간 있음

* 서블릿은 [	HttpServlet	]의 상속을 받아 작성하며,
	GET 요청 시 [ doGet	] 메소드가 실행되고,
	POST 요청 시 [doPost	   ] 메소드가 실행된다.
	- 두 메소드는 모두 2개의 매개변수를 받는데,
		첫번째 매개변수인 [ request	]는 요청 시 전달되는 내용들이 담겨져 있고,
		두번째 매개변수인 [ response	]는 요청에 대한 처리 후 응답할 때 사용되는 객체이다.
	- 요청 시 전달된 데이터를 확인하기 위해 사용되는 메소드는
		[ getParameter	]와 [getParameterValues	] 가 있다.
		+ [getParameter		] 메소드는 전달된 키값에 해당되는 밸류값을 String 형식으로 반환한다.
		+ [getParameterValues		] 메소드는 전달된 키값에 해당되는 밸류값들을 String[] 형식으로 반환한다.

	- 단순하게 서블릿을 구현하는 경우 GET 요청과 POST 요청은 내부적으로 [동일	  ]하게 처리된다.

* 서블릿 응답 순서
	1) 출력할 내용의 [	문서 형태	]와 [	문자셋(인코딩)]를 설정
	   * response.setContentType([ "text/html;charset=UTF-8"	]);
	2) 요청한 곳으로 [	스트림	] 생성
	   * response.[getWriter()	] 사용
	3) 생성된 [스트림	]을 통해 [응답페이지(html)	]을 작성
	   * 서블릿으로 응답할 경우 : [스트림객체명.print()사용 // println(), printf()	] 사용
	   * jsp로 응답할 경우 : [	dispatcher객체명.forward() 	] 사용
			// RequestDispatcher 객체
---------------------------------------------------------------------------------------------------
* form 태그를 사용하여 요청
	{ 아래 빈칸에 들어갈 속성을 작성해주세요. }
	- [ action       ] : 요청 주소(목적지) 작성
	- [ method       ] : 요청 방식 작성